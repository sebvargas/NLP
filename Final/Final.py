import nltk
import re
from nltk.util import transitive_closure, invert_graph
from nltk.compat import (string_types, total_ordering, text_type,
                         python_2_unicode_compatible, unicode_repr)

def main():
    #tokens = ["book", "the", "flight", "through", "Houston"]
    tokens = []
    #grammar = []
    with open('string.txt', 'r') as f:
        for line in f:
            for word in line.split():
                tokens.append(word)
    tokens = ["book", "the", "flight", "through", "Houston"]
    print(tokens)
    
    gf = open("grammar.txt", 'r')
    grammarCode = gf.readlines()
    gf.close()
    #print grammarCode

    grammar = nltk.CFG.fromstring(grammarCode)
    #print grammar
    parser = nltk.ChartParser(grammar)
    #print parser
    while True:
        try:
            for tree in parser.parse(tokens):
                print(tree)
            print("Yes, this string can be generated by the language")

            break
        except ValueError:
            print("No, this string cannot be generated by the language")
            break
           

main()
