import nltk
import re
"""
def main():
    #tokens = ["book", "the", "flight", "through", "Houston"]
    tokens = []
    #grammar = []
    with open('string.txt', 'r') as f:
        for line in f:
            for word in line.split():
                tokens.append(word)
    
    print(tokens)
    
    gf = open("grammar.txt", 'r')
    grammarCode = gf.readlines()
    gf.close()
    #print (grammarCode)
    ruleList = []
    orgGrammar(grammarCode, ruleList)
    print ruleList
"""
"""
    grammar = fromstring(grammarCode)
    #print grammar
    parser = nltk.ChartParser(grammar)
    #print parser
    while True:
        try:
            for tree in parser.parse(tokens):
                print(tree)
            print("Yes, this string can be generated by the language")

            break
        except ValueError:
            print("No, this string cannot be generated by the language")
            break
"""
# Gets the rules from the grammar
def getRules():
    rules = []
    with open('grammar.txt', 'r') as f:
        for line in f:
            s = line.split('->')
            RHSs = s[1].strip().split('|')
            for r in RHSs:
                rules.append((s[0].strip(), r.strip().split()))
    return rules

def LHSCheck(rules, setRules):
    for rule in rules:
        setRules.append(rule[0])
    return set(setRules)

def RHSCheck(rules, LHSSet, RHSSet):
    for rule in rules:
        for tokens in rule[1]:
            if tokens not in LHSSet:
                RHSSet.append(tokens)
    return set(RHSSet)
        
# Run the program
def main():
    # Parse the string
    tokens = []
    inpTokens = []
    setRules = []
    LHSSet = [] #
    RHSSet = []
    matrix = []
    with open('string.txt', 'r') as f:
        for line in f:
            for word in line.split():
                tokens.append(word)

    #for t in tokens:
    #    print t
    #print ''

    rules = getRules()
    #for r in rules:
    #    print r
    
    LHSSet = LHSCheck(rules,setRules)
    RHSSet = RHSCheck(rules, LHSSet, RHSSet)
    
    with open('string.txt', 'r') as f:
        for line in f:
            for word in line.split():
                inpTokens.append(word)

    size = len(inpTokens)
    #print size
    makeMatrix(matrix, inpTokens, size, rules)
    print matrix
    
def makeMatrix(matrix, inpTokens, size, rules):
    for i in range(size):
        for j in range(size):
             for item in rules:
                if inpTokens[i] in item[1]:
                    matrix.append(item[0])
                    #temp = [matrix[i][j]]
                    #temp.append(rules[0])
                    #matrix[i][j] = temp
                    print item[0]
                    
if __name__ == '__main__':
    main()

    


